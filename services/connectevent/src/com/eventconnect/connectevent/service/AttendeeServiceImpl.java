/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.eventconnect.connectevent.Attendee;


/**
 * ServiceImpl object for domain model class Attendee.
 *
 * @see Attendee
 */
@Service("connectevent.AttendeeService")
@Validated
@EntityService(entityClass = Attendee.class, serviceId = "connectevent")
public class AttendeeServiceImpl implements AttendeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AttendeeServiceImpl.class);


    @Autowired
    @Qualifier("connectevent.AttendeeDao")
    private WMGenericDao<Attendee, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Attendee, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "connecteventTransactionManager")
    @Override
    public Attendee create(Attendee attendee) {
        LOGGER.debug("Creating a new Attendee with information: {}", attendee);

        Attendee attendeeCreated = this.wmGenericDao.create(attendee);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(attendeeCreated);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Attendee getById(Integer attendeeId) {
        LOGGER.debug("Finding Attendee by id: {}", attendeeId);
        return this.wmGenericDao.findById(attendeeId);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Attendee findById(Integer attendeeId) {
        LOGGER.debug("Finding Attendee by id: {}", attendeeId);
        try {
            return this.wmGenericDao.findById(attendeeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Attendee found with id: {}", attendeeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public List<Attendee> findByMultipleIds(List<Integer> attendeeIds, boolean orderedReturn) {
        LOGGER.debug("Finding Attendees by ids: {}", attendeeIds);

        return this.wmGenericDao.findByMultipleIds(attendeeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "connecteventTransactionManager")
    @Override
    public Attendee update(Attendee attendee) {
        LOGGER.debug("Updating Attendee with information: {}", attendee);

        this.wmGenericDao.update(attendee);
        this.wmGenericDao.refresh(attendee);

        return attendee;
    }

    @Transactional(value = "connecteventTransactionManager")
    @Override
    public Attendee partialUpdate(Integer attendeeId, Map<String, Object>attendeePatch) {
        LOGGER.debug("Partially Updating the Attendee with id: {}", attendeeId);

        Attendee attendee = getById(attendeeId);

        try {
            ObjectReader attendeeReader = this.objectMapper.reader().forType(Attendee.class).withValueToUpdate(attendee);
            attendee = attendeeReader.readValue(this.objectMapper.writeValueAsString(attendeePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", attendeePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        attendee = update(attendee);

        return attendee;
    }

    @Transactional(value = "connecteventTransactionManager")
    @Override
    public Attendee delete(Integer attendeeId) {
        LOGGER.debug("Deleting Attendee with id: {}", attendeeId);
        Attendee deleted = this.wmGenericDao.findById(attendeeId);
        if (deleted == null) {
            LOGGER.debug("No Attendee found with id: {}", attendeeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Attendee.class.getSimpleName(), attendeeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "connecteventTransactionManager")
    @Override
    public void delete(Attendee attendee) {
        LOGGER.debug("Deleting Attendee with {}", attendee);
        this.wmGenericDao.delete(attendee);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Page<Attendee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Attendees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Page<Attendee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Attendees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service connectevent for table Attendee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service connectevent for table Attendee to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}