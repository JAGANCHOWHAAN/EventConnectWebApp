/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.eventconnect.connectevent.EventSpeaker;

/**
 * Service object for domain model class {@link EventSpeaker}.
 */
public interface EventSpeakerService {

    /**
     * Creates a new EventSpeaker. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EventSpeaker if any.
     *
     * @param eventSpeaker Details of the EventSpeaker to be created; value cannot be null.
     * @return The newly created EventSpeaker.
     */
    EventSpeaker create(@Valid EventSpeaker eventSpeaker);


	/**
     * Returns EventSpeaker by given id if exists.
     *
     * @param eventspeakerId The id of the EventSpeaker to get; value cannot be null.
     * @return EventSpeaker associated with the given eventspeakerId.
	 * @throws EntityNotFoundException If no EventSpeaker is found.
     */
    EventSpeaker getById(Integer eventspeakerId);

    /**
     * Find and return the EventSpeaker by given id if exists, returns null otherwise.
     *
     * @param eventspeakerId The id of the EventSpeaker to get; value cannot be null.
     * @return EventSpeaker associated with the given eventspeakerId.
     */
    EventSpeaker findById(Integer eventspeakerId);

	/**
     * Find and return the list of EventSpeakers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param eventspeakerIds The id's of the EventSpeaker to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return EventSpeakers associated with the given eventspeakerIds.
     */
    List<EventSpeaker> findByMultipleIds(List<Integer> eventspeakerIds, boolean orderedReturn);


    /**
     * Updates the details of an existing EventSpeaker. It replaces all fields of the existing EventSpeaker with the given eventSpeaker.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EventSpeaker if any.
     *
     * @param eventSpeaker The details of the EventSpeaker to be updated; value cannot be null.
     * @return The updated EventSpeaker.
     * @throws EntityNotFoundException if no EventSpeaker is found with given input.
     */
    EventSpeaker update(@Valid EventSpeaker eventSpeaker);


    /**
     * Partially updates the details of an existing EventSpeaker. It updates only the
     * fields of the existing EventSpeaker which are passed in the eventSpeakerPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EventSpeaker if any.
     *
     * @param eventspeakerId The id of the EventSpeaker to be deleted; value cannot be null.
     * @param eventSpeakerPatch The partial data of EventSpeaker which is supposed to be updated; value cannot be null.
     * @return The updated EventSpeaker.
     * @throws EntityNotFoundException if no EventSpeaker is found with given input.
     */
    EventSpeaker partialUpdate(Integer eventspeakerId, Map<String, Object> eventSpeakerPatch);

    /**
     * Deletes an existing EventSpeaker with the given id.
     *
     * @param eventspeakerId The id of the EventSpeaker to be deleted; value cannot be null.
     * @return The deleted EventSpeaker.
     * @throws EntityNotFoundException if no EventSpeaker found with the given id.
     */
    EventSpeaker delete(Integer eventspeakerId);

    /**
     * Deletes an existing EventSpeaker with the given object.
     *
     * @param eventSpeaker The instance of the EventSpeaker to be deleted; value cannot be null.
     */
    void delete(EventSpeaker eventSpeaker);

    /**
     * Find all EventSpeakers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EventSpeakers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<EventSpeaker> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all EventSpeakers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EventSpeakers.
     *
     * @see Pageable
     * @see Page
     */
    Page<EventSpeaker> findAll(String query, Pageable pageable);

    /**
     * Exports all EventSpeakers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all EventSpeakers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the EventSpeakers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the EventSpeaker.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}