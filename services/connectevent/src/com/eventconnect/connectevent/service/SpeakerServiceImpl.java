/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.eventconnect.connectevent.EventSpeaker;
import com.eventconnect.connectevent.Speaker;


/**
 * ServiceImpl object for domain model class Speaker.
 *
 * @see Speaker
 */
@Service("connectevent.SpeakerService")
@Validated
@EntityService(entityClass = Speaker.class, serviceId = "connectevent")
public class SpeakerServiceImpl implements SpeakerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpeakerServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("connectevent.EventSpeakerService")
    private EventSpeakerService eventSpeakerService;

    @Autowired
    @Qualifier("connectevent.SpeakerDao")
    private WMGenericDao<Speaker, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Speaker, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "connecteventTransactionManager")
    @Override
    public Speaker create(Speaker speaker) {
        LOGGER.debug("Creating a new Speaker with information: {}", speaker);

        Speaker speakerCreated = this.wmGenericDao.create(speaker);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(speakerCreated);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Speaker getById(Integer speakerId) {
        LOGGER.debug("Finding Speaker by id: {}", speakerId);
        return this.wmGenericDao.findById(speakerId);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Speaker findById(Integer speakerId) {
        LOGGER.debug("Finding Speaker by id: {}", speakerId);
        try {
            return this.wmGenericDao.findById(speakerId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Speaker found with id: {}", speakerId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public List<Speaker> findByMultipleIds(List<Integer> speakerIds, boolean orderedReturn) {
        LOGGER.debug("Finding Speakers by ids: {}", speakerIds);

        return this.wmGenericDao.findByMultipleIds(speakerIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "connecteventTransactionManager")
    @Override
    public Speaker update(Speaker speaker) {
        LOGGER.debug("Updating Speaker with information: {}", speaker);

        this.wmGenericDao.update(speaker);
        this.wmGenericDao.refresh(speaker);

        return speaker;
    }

    @Transactional(value = "connecteventTransactionManager")
    @Override
    public Speaker partialUpdate(Integer speakerId, Map<String, Object>speakerPatch) {
        LOGGER.debug("Partially Updating the Speaker with id: {}", speakerId);

        Speaker speaker = getById(speakerId);

        try {
            ObjectReader speakerReader = this.objectMapper.reader().forType(Speaker.class).withValueToUpdate(speaker);
            speaker = speakerReader.readValue(this.objectMapper.writeValueAsString(speakerPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", speakerPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        speaker = update(speaker);

        return speaker;
    }

    @Transactional(value = "connecteventTransactionManager")
    @Override
    public Speaker delete(Integer speakerId) {
        LOGGER.debug("Deleting Speaker with id: {}", speakerId);
        Speaker deleted = this.wmGenericDao.findById(speakerId);
        if (deleted == null) {
            LOGGER.debug("No Speaker found with id: {}", speakerId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Speaker.class.getSimpleName(), speakerId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "connecteventTransactionManager")
    @Override
    public void delete(Speaker speaker) {
        LOGGER.debug("Deleting Speaker with {}", speaker);
        this.wmGenericDao.delete(speaker);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Page<Speaker> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Speakers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Page<Speaker> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Speakers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service connectevent for table Speaker to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service connectevent for table Speaker to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "connecteventTransactionManager")
    @Override
    public Page<EventSpeaker> findAssociatedEventSpeakers(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated eventSpeakers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("speaker.id = '" + id + "'");

        return eventSpeakerService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EventSpeakerService instance
     */
    protected void setEventSpeakerService(EventSpeakerService service) {
        this.eventSpeakerService = service;
    }

}