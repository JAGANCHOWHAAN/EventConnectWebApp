/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.eventconnect.connectevent.Attendee;
import com.eventconnect.connectevent.EventDetail;
import com.eventconnect.connectevent.EventSpeaker;

/**
 * Service object for domain model class {@link EventDetail}.
 */
public interface EventDetailService {

    /**
     * Creates a new EventDetail. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EventDetail if any.
     *
     * @param eventDetail Details of the EventDetail to be created; value cannot be null.
     * @return The newly created EventDetail.
     */
    EventDetail create(@Valid EventDetail eventDetail);


	/**
     * Returns EventDetail by given id if exists.
     *
     * @param eventdetailId The id of the EventDetail to get; value cannot be null.
     * @return EventDetail associated with the given eventdetailId.
	 * @throws EntityNotFoundException If no EventDetail is found.
     */
    EventDetail getById(Integer eventdetailId);

    /**
     * Find and return the EventDetail by given id if exists, returns null otherwise.
     *
     * @param eventdetailId The id of the EventDetail to get; value cannot be null.
     * @return EventDetail associated with the given eventdetailId.
     */
    EventDetail findById(Integer eventdetailId);

	/**
     * Find and return the list of EventDetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param eventdetailIds The id's of the EventDetail to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return EventDetails associated with the given eventdetailIds.
     */
    List<EventDetail> findByMultipleIds(List<Integer> eventdetailIds, boolean orderedReturn);

    /**
     * Find and return the EventDetail for given title  if exists.
     *
     * @param title value of title; value cannot be null.
     * @return EventDetail associated with the given inputs.
     * @throws EntityNotFoundException if no matching EventDetail found.
     */
    EventDetail getByTitle(String title);

    /**
     * Find and return the EventDetail for given meetingLink  if exists.
     *
     * @param meetingLink value of meetingLink; value cannot be null.
     * @return EventDetail associated with the given inputs.
     * @throws EntityNotFoundException if no matching EventDetail found.
     */
    EventDetail getByMeetingLink(String meetingLink);

    /**
     * Updates the details of an existing EventDetail. It replaces all fields of the existing EventDetail with the given eventDetail.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EventDetail if any.
     *
     * @param eventDetail The details of the EventDetail to be updated; value cannot be null.
     * @return The updated EventDetail.
     * @throws EntityNotFoundException if no EventDetail is found with given input.
     */
    EventDetail update(@Valid EventDetail eventDetail);


    /**
     * Partially updates the details of an existing EventDetail. It updates only the
     * fields of the existing EventDetail which are passed in the eventDetailPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EventDetail if any.
     *
     * @param eventdetailId The id of the EventDetail to be deleted; value cannot be null.
     * @param eventDetailPatch The partial data of EventDetail which is supposed to be updated; value cannot be null.
     * @return The updated EventDetail.
     * @throws EntityNotFoundException if no EventDetail is found with given input.
     */
    EventDetail partialUpdate(Integer eventdetailId, Map<String, Object> eventDetailPatch);

    /**
     * Deletes an existing EventDetail with the given id.
     *
     * @param eventdetailId The id of the EventDetail to be deleted; value cannot be null.
     * @return The deleted EventDetail.
     * @throws EntityNotFoundException if no EventDetail found with the given id.
     */
    EventDetail delete(Integer eventdetailId);

    /**
     * Deletes an existing EventDetail with the given object.
     *
     * @param eventDetail The instance of the EventDetail to be deleted; value cannot be null.
     */
    void delete(EventDetail eventDetail);

    /**
     * Find all EventDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EventDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<EventDetail> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all EventDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EventDetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<EventDetail> findAll(String query, Pageable pageable);

    /**
     * Exports all EventDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all EventDetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the EventDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the EventDetail.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated attendees for given EventDetail id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Attendee instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Attendee> findAssociatedAttendees(Integer id, Pageable pageable);

    /*
     * Returns the associated eventSpeakers for given EventDetail id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated EventSpeaker instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<EventSpeaker> findAssociatedEventSpeakers(Integer id, Pageable pageable);

}