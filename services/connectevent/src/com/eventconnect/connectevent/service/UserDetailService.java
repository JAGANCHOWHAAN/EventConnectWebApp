/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.eventconnect.connectevent.Attendee;
import com.eventconnect.connectevent.EventDetail;
import com.eventconnect.connectevent.UserDetail;

/**
 * Service object for domain model class {@link UserDetail}.
 */
public interface UserDetailService {

    /**
     * Creates a new UserDetail. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserDetail if any.
     *
     * @param userDetail Details of the UserDetail to be created; value cannot be null.
     * @return The newly created UserDetail.
     */
    UserDetail create(@Valid UserDetail userDetail);


	/**
     * Returns UserDetail by given id if exists.
     *
     * @param userdetailId The id of the UserDetail to get; value cannot be null.
     * @return UserDetail associated with the given userdetailId.
	 * @throws EntityNotFoundException If no UserDetail is found.
     */
    UserDetail getById(Integer userdetailId);

    /**
     * Find and return the UserDetail by given id if exists, returns null otherwise.
     *
     * @param userdetailId The id of the UserDetail to get; value cannot be null.
     * @return UserDetail associated with the given userdetailId.
     */
    UserDetail findById(Integer userdetailId);

	/**
     * Find and return the list of UserDetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param userdetailIds The id's of the UserDetail to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserDetails associated with the given userdetailIds.
     */
    List<UserDetail> findByMultipleIds(List<Integer> userdetailIds, boolean orderedReturn);

    /**
     * Find and return the UserDetail for given emailId  if exists.
     *
     * @param emailId value of emailId; value cannot be null.
     * @return UserDetail associated with the given inputs.
     * @throws EntityNotFoundException if no matching UserDetail found.
     */
    UserDetail getByEmailId(String emailId);

    /**
     * Find and return the UserDetail for given phoneNumber  if exists.
     *
     * @param phoneNumber value of phoneNumber; value cannot be null.
     * @return UserDetail associated with the given inputs.
     * @throws EntityNotFoundException if no matching UserDetail found.
     */
    UserDetail getByPhoneNumber(String phoneNumber);

    /**
     * Find and return the UserDetail for given password  if exists.
     *
     * @param password value of password; value cannot be null.
     * @return UserDetail associated with the given inputs.
     * @throws EntityNotFoundException if no matching UserDetail found.
     */
    UserDetail getByPassword(String password);

    /**
     * Updates the details of an existing UserDetail. It replaces all fields of the existing UserDetail with the given userDetail.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserDetail if any.
     *
     * @param userDetail The details of the UserDetail to be updated; value cannot be null.
     * @return The updated UserDetail.
     * @throws EntityNotFoundException if no UserDetail is found with given input.
     */
    UserDetail update(@Valid UserDetail userDetail);


    /**
     * Partially updates the details of an existing UserDetail. It updates only the
     * fields of the existing UserDetail which are passed in the userDetailPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserDetail if any.
     *
     * @param userdetailId The id of the UserDetail to be deleted; value cannot be null.
     * @param userDetailPatch The partial data of UserDetail which is supposed to be updated; value cannot be null.
     * @return The updated UserDetail.
     * @throws EntityNotFoundException if no UserDetail is found with given input.
     */
    UserDetail partialUpdate(Integer userdetailId, Map<String, Object> userDetailPatch);

    /**
     * Deletes an existing UserDetail with the given id.
     *
     * @param userdetailId The id of the UserDetail to be deleted; value cannot be null.
     * @return The deleted UserDetail.
     * @throws EntityNotFoundException if no UserDetail found with the given id.
     */
    UserDetail delete(Integer userdetailId);

    /**
     * Deletes an existing UserDetail with the given object.
     *
     * @param userDetail The instance of the UserDetail to be deleted; value cannot be null.
     */
    void delete(UserDetail userDetail);

    /**
     * Find all UserDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserDetail> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserDetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserDetail> findAll(String query, Pageable pageable);

    /**
     * Exports all UserDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserDetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserDetail.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated attendees for given UserDetail id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Attendee instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Attendee> findAssociatedAttendees(Integer id, Pageable pageable);

    /*
     * Returns the associated eventDetails for given UserDetail id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated EventDetail instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<EventDetail> findAssociatedEventDetails(Integer id, Pageable pageable);

}