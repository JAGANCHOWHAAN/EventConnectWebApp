/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.eventconnect.connectevent.service.ConnecteventQueryExecutorService;
import com.eventconnect.connectevent.models.query.*;

@RestController(value = "Connectevent.QueryExecutionController")
@RequestMapping("/connectevent/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private ConnecteventQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @GetMapping(value = "/queries/getEventDetailsByLoginId")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "gives event details")
    public Page<GetEventDetailsByLoginIdResponse> executeGetEventDetailsByLoginId(@RequestParam(value = "id") String id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getEventDetailsByLoginId");
        Page<GetEventDetailsByLoginIdResponse> _result = queryService.executeGetEventDetailsByLoginId(id, pageable);
        LOGGER.debug("got the result for named query: getEventDetailsByLoginId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getEventDetailsByLoginId")
    @PostMapping(value = "/queries/getEventDetailsByLoginId/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetEventDetailsByLoginId(@RequestParam(value = "id") String id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getEventDetailsByLoginId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getEventDetailsByLoginId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetEventDetailsByLoginId(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/EventSpeakerDetails")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query gives the speaker details associated with a particular event")
    public Page<EventSpeakerDetailsResponse> executeEventSpeakerDetails(@RequestParam(value = "EventID") String eventId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EventSpeakerDetails");
        Page<EventSpeakerDetailsResponse> _result = queryService.executeEventSpeakerDetails(eventId, pageable);
        LOGGER.debug("got the result for named query: EventSpeakerDetails, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EventSpeakerDetails")
    @PostMapping(value = "/queries/EventSpeakerDetails/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEventSpeakerDetails(@RequestParam(value = "EventID") String eventId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EventSpeakerDetails");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EventSpeakerDetails";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEventSpeakerDetails(eventId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/EventSpeakerDetails1")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query gives the speaker details associated with an event")
    public Page<EventSpeakerDetails1Response> executeEventSpeakerDetails1(@RequestParam(value = "EventID") String eventId, @RequestParam(value = "SpeakerID") String speakerId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EventSpeakerDetails1");
        Page<EventSpeakerDetails1Response> _result = queryService.executeEventSpeakerDetails1(eventId, speakerId, pageable);
        LOGGER.debug("got the result for named query: EventSpeakerDetails1, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EventSpeakerDetails1")
    @PostMapping(value = "/queries/EventSpeakerDetails1/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEventSpeakerDetails1(@RequestParam(value = "EventID") String eventId, @RequestParam(value = "SpeakerID") String speakerId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EventSpeakerDetails1");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EventSpeakerDetails1";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEventSpeakerDetails1(eventId, speakerId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/EventSpeakerDetailsEventID")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "to retrieve the speaker details associated with an event")
    public Page<EventSpeakerDetailsEventIdResponse> executeEventSpeakerDetailsEventID(@RequestParam(value = "EventID") String eventId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EventSpeakerDetailsEventID");
        Page<EventSpeakerDetailsEventIdResponse> _result = queryService.executeEventSpeakerDetailsEventID(eventId, pageable);
        LOGGER.debug("got the result for named query: EventSpeakerDetailsEventID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EventSpeakerDetailsEventID")
    @PostMapping(value = "/queries/EventSpeakerDetailsEventID/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEventSpeakerDetailsEventID(@RequestParam(value = "EventID") String eventId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EventSpeakerDetailsEventID");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EventSpeakerDetailsEventID";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEventSpeakerDetailsEventID(eventId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}