/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.eventconnect.connectevent.EventSpeaker;
import com.eventconnect.connectevent.Speaker;
import com.eventconnect.connectevent.service.SpeakerService;


/**
 * Controller object for domain model class Speaker.
 * @see Speaker
 */
@RestController("connectevent.SpeakerController")
@Api(value = "SpeakerController", description = "Exposes APIs to work with Speaker resource.")
@RequestMapping("/connectevent/Speaker")
public class SpeakerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpeakerController.class);

    @Autowired
	@Qualifier("connectevent.SpeakerService")
	private SpeakerService speakerService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Speaker instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Speaker createSpeaker(@RequestBody Speaker speaker) {
		LOGGER.debug("Create Speaker with information: {}" , speaker);

		speaker = speakerService.create(speaker);
		LOGGER.debug("Created Speaker with information: {}" , speaker);

	    return speaker;
	}

    @ApiOperation(value = "Returns the Speaker instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Speaker getSpeaker(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Speaker with id: {}" , id);

        Speaker foundSpeaker = speakerService.getById(id);
        LOGGER.debug("Speaker details with id: {}" , foundSpeaker);

        return foundSpeaker;
    }

    @ApiOperation(value = "Updates the Speaker instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Speaker editSpeaker(@PathVariable("id") Integer id, @RequestBody Speaker speaker) {
        LOGGER.debug("Editing Speaker with id: {}" , speaker.getId());

        speaker.setId(id);
        speaker = speakerService.update(speaker);
        LOGGER.debug("Speaker details with id: {}" , speaker);

        return speaker;
    }
    
    @ApiOperation(value = "Partially updates the Speaker instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Speaker patchSpeaker(@PathVariable("id") Integer id, @RequestBody @MapTo(Speaker.class) Map<String, Object> speakerPatch) {
        LOGGER.debug("Partially updating Speaker with id: {}" , id);

        Speaker speaker = speakerService.partialUpdate(id, speakerPatch);
        LOGGER.debug("Speaker details after partial update: {}" , speaker);

        return speaker;
    }

    @ApiOperation(value = "Deletes the Speaker instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSpeaker(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Speaker with id: {}" , id);

        Speaker deletedSpeaker = speakerService.delete(id);

        return deletedSpeaker != null;
    }

    /**
     * @deprecated Use {@link #findSpeakers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Speaker instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Speaker> searchSpeakersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Speakers list by query filter:{}", (Object) queryFilters);
        return speakerService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Speaker instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Speaker> findSpeakers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Speakers list by filter:", query);
        return speakerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Speaker instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Speaker> filterSpeakers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Speakers list by filter", query);
        return speakerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSpeakers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return speakerService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSpeakersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Speaker.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> speakerService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Speaker instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSpeakers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Speakers");
		return speakerService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSpeakerAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return speakerService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/eventSpeakers")
    @ApiOperation(value = "Gets the eventSpeakers instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EventSpeaker> findAssociatedEventSpeakers(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated eventSpeakers");
        return speakerService.findAssociatedEventSpeakers(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SpeakerService instance
	 */
	protected void setSpeakerService(SpeakerService service) {
		this.speakerService = service;
	}

}