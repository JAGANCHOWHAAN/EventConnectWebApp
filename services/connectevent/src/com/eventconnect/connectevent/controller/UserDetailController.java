/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.eventconnect.connectevent.Attendee;
import com.eventconnect.connectevent.EventDetail;
import com.eventconnect.connectevent.UserDetail;
import com.eventconnect.connectevent.service.UserDetailService;


/**
 * Controller object for domain model class UserDetail.
 * @see UserDetail
 */
@RestController("connectevent.UserDetailController")
@Api(value = "UserDetailController", description = "Exposes APIs to work with UserDetail resource.")
@RequestMapping("/connectevent/UserDetail")
public class UserDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserDetailController.class);

    @Autowired
	@Qualifier("connectevent.UserDetailService")
	private UserDetailService userDetailService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new UserDetail instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetail createUserDetail(@RequestBody UserDetail userDetail) {
		LOGGER.debug("Create UserDetail with information: {}" , userDetail);

		userDetail = userDetailService.create(userDetail);
		LOGGER.debug("Created UserDetail with information: {}" , userDetail);

	    return userDetail;
	}

    @ApiOperation(value = "Returns the UserDetail instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetail getUserDetail(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting UserDetail with id: {}" , id);

        UserDetail foundUserDetail = userDetailService.getById(id);
        LOGGER.debug("UserDetail details with id: {}" , foundUserDetail);

        return foundUserDetail;
    }

    @ApiOperation(value = "Updates the UserDetail instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetail editUserDetail(@PathVariable("id") Integer id, @RequestBody UserDetail userDetail) {
        LOGGER.debug("Editing UserDetail with id: {}" , userDetail.getId());

        userDetail.setId(id);
        userDetail = userDetailService.update(userDetail);
        LOGGER.debug("UserDetail details with id: {}" , userDetail);

        return userDetail;
    }
    
    @ApiOperation(value = "Partially updates the UserDetail instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetail patchUserDetail(@PathVariable("id") Integer id, @RequestBody @MapTo(UserDetail.class) Map<String, Object> userDetailPatch) {
        LOGGER.debug("Partially updating UserDetail with id: {}" , id);

        UserDetail userDetail = userDetailService.partialUpdate(id, userDetailPatch);
        LOGGER.debug("UserDetail details after partial update: {}" , userDetail);

        return userDetail;
    }

    @ApiOperation(value = "Deletes the UserDetail instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserDetail(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting UserDetail with id: {}" , id);

        UserDetail deletedUserDetail = userDetailService.delete(id);

        return deletedUserDetail != null;
    }

    @GetMapping(value = "/emailId/{emailId}" )
    @ApiOperation(value = "Returns the matching UserDetail with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetail getByEmailId(@PathVariable("emailId") String emailId) {
        LOGGER.debug("Getting UserDetail with uniques key EmailId");
        return userDetailService.getByEmailId(emailId);
    }

    @GetMapping(value = "/phoneNumber/{phoneNumber}" )
    @ApiOperation(value = "Returns the matching UserDetail with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetail getByPhoneNumber(@PathVariable("phoneNumber") String phoneNumber) {
        LOGGER.debug("Getting UserDetail with uniques key PhoneNumber");
        return userDetailService.getByPhoneNumber(phoneNumber);
    }

    @GetMapping(value = "/password/{password}" )
    @ApiOperation(value = "Returns the matching UserDetail with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetail getByPassword(@PathVariable("password") String password) {
        LOGGER.debug("Getting UserDetail with uniques key Password");
        return userDetailService.getByPassword(password);
    }

    /**
     * @deprecated Use {@link #findUserDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserDetail instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserDetail> searchUserDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserDetails list by query filter:{}", (Object) queryFilters);
        return userDetailService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserDetail instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserDetail> findUserDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserDetails list by filter:", query);
        return userDetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserDetail instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserDetail> filterUserDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserDetails list by filter", query);
        return userDetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userDetailService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportUserDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = UserDetail.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> userDetailService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of UserDetail instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserDetails");
		return userDetailService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserDetailAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userDetailService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/attendees")
    @ApiOperation(value = "Gets the attendees instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Attendee> findAssociatedAttendees(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated attendees");
        return userDetailService.findAssociatedAttendees(id, pageable);
    }

    @GetMapping(value="/{id:.+}/eventDetails")
    @ApiOperation(value = "Gets the eventDetails instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EventDetail> findAssociatedEventDetails(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated eventDetails");
        return userDetailService.findAssociatedEventDetails(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserDetailService instance
	 */
	protected void setUserDetailService(UserDetailService service) {
		this.userDetailService = service;
	}

}