/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.eventconnect.connectevent.EventSpeaker;
import com.eventconnect.connectevent.service.EventSpeakerService;


/**
 * Controller object for domain model class EventSpeaker.
 * @see EventSpeaker
 */
@RestController("connectevent.EventSpeakerController")
@Api(value = "EventSpeakerController", description = "Exposes APIs to work with EventSpeaker resource.")
@RequestMapping("/connectevent/EventSpeaker")
public class EventSpeakerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EventSpeakerController.class);

    @Autowired
	@Qualifier("connectevent.EventSpeakerService")
	private EventSpeakerService eventSpeakerService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new EventSpeaker instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventSpeaker createEventSpeaker(@RequestBody EventSpeaker eventSpeaker) {
		LOGGER.debug("Create EventSpeaker with information: {}" , eventSpeaker);

		eventSpeaker = eventSpeakerService.create(eventSpeaker);
		LOGGER.debug("Created EventSpeaker with information: {}" , eventSpeaker);

	    return eventSpeaker;
	}

    @ApiOperation(value = "Returns the EventSpeaker instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventSpeaker getEventSpeaker(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting EventSpeaker with id: {}" , id);

        EventSpeaker foundEventSpeaker = eventSpeakerService.getById(id);
        LOGGER.debug("EventSpeaker details with id: {}" , foundEventSpeaker);

        return foundEventSpeaker;
    }

    @ApiOperation(value = "Updates the EventSpeaker instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventSpeaker editEventSpeaker(@PathVariable("id") Integer id, @RequestBody EventSpeaker eventSpeaker) {
        LOGGER.debug("Editing EventSpeaker with id: {}" , eventSpeaker.getId());

        eventSpeaker.setId(id);
        eventSpeaker = eventSpeakerService.update(eventSpeaker);
        LOGGER.debug("EventSpeaker details with id: {}" , eventSpeaker);

        return eventSpeaker;
    }
    
    @ApiOperation(value = "Partially updates the EventSpeaker instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventSpeaker patchEventSpeaker(@PathVariable("id") Integer id, @RequestBody @MapTo(EventSpeaker.class) Map<String, Object> eventSpeakerPatch) {
        LOGGER.debug("Partially updating EventSpeaker with id: {}" , id);

        EventSpeaker eventSpeaker = eventSpeakerService.partialUpdate(id, eventSpeakerPatch);
        LOGGER.debug("EventSpeaker details after partial update: {}" , eventSpeaker);

        return eventSpeaker;
    }

    @ApiOperation(value = "Deletes the EventSpeaker instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEventSpeaker(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting EventSpeaker with id: {}" , id);

        EventSpeaker deletedEventSpeaker = eventSpeakerService.delete(id);

        return deletedEventSpeaker != null;
    }

    /**
     * @deprecated Use {@link #findEventSpeakers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EventSpeaker instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EventSpeaker> searchEventSpeakersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EventSpeakers list by query filter:{}", (Object) queryFilters);
        return eventSpeakerService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EventSpeaker instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EventSpeaker> findEventSpeakers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EventSpeakers list by filter:", query);
        return eventSpeakerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EventSpeaker instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EventSpeaker> filterEventSpeakers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EventSpeakers list by filter", query);
        return eventSpeakerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEventSpeakers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return eventSpeakerService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEventSpeakersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = EventSpeaker.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> eventSpeakerService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of EventSpeaker instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEventSpeakers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EventSpeakers");
		return eventSpeakerService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEventSpeakerAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return eventSpeakerService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EventSpeakerService instance
	 */
	protected void setEventSpeakerService(EventSpeakerService service) {
		this.eventSpeakerService = service;
	}

}