/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.eventconnect.connectevent.Attendee;
import com.eventconnect.connectevent.EventDetail;
import com.eventconnect.connectevent.EventSpeaker;
import com.eventconnect.connectevent.service.EventDetailService;


/**
 * Controller object for domain model class EventDetail.
 * @see EventDetail
 */
@RestController("connectevent.EventDetailController")
@Api(value = "EventDetailController", description = "Exposes APIs to work with EventDetail resource.")
@RequestMapping("/connectevent/EventDetail")
public class EventDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EventDetailController.class);

    @Autowired
	@Qualifier("connectevent.EventDetailService")
	private EventDetailService eventDetailService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new EventDetail instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventDetail createEventDetail(@RequestBody EventDetail eventDetail) {
		LOGGER.debug("Create EventDetail with information: {}" , eventDetail);

		eventDetail = eventDetailService.create(eventDetail);
		LOGGER.debug("Created EventDetail with information: {}" , eventDetail);

	    return eventDetail;
	}

    @ApiOperation(value = "Returns the EventDetail instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventDetail getEventDetail(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting EventDetail with id: {}" , id);

        EventDetail foundEventDetail = eventDetailService.getById(id);
        LOGGER.debug("EventDetail details with id: {}" , foundEventDetail);

        return foundEventDetail;
    }

    @ApiOperation(value = "Updates the EventDetail instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventDetail editEventDetail(@PathVariable("id") Integer id, @RequestBody EventDetail eventDetail) {
        LOGGER.debug("Editing EventDetail with id: {}" , eventDetail.getId());

        eventDetail.setId(id);
        eventDetail = eventDetailService.update(eventDetail);
        LOGGER.debug("EventDetail details with id: {}" , eventDetail);

        return eventDetail;
    }
    
    @ApiOperation(value = "Partially updates the EventDetail instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventDetail patchEventDetail(@PathVariable("id") Integer id, @RequestBody @MapTo(EventDetail.class) Map<String, Object> eventDetailPatch) {
        LOGGER.debug("Partially updating EventDetail with id: {}" , id);

        EventDetail eventDetail = eventDetailService.partialUpdate(id, eventDetailPatch);
        LOGGER.debug("EventDetail details after partial update: {}" , eventDetail);

        return eventDetail;
    }

    @ApiOperation(value = "Deletes the EventDetail instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEventDetail(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting EventDetail with id: {}" , id);

        EventDetail deletedEventDetail = eventDetailService.delete(id);

        return deletedEventDetail != null;
    }

    @GetMapping(value = "/title/{title}" )
    @ApiOperation(value = "Returns the matching EventDetail with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventDetail getByTitle(@PathVariable("title") String title) {
        LOGGER.debug("Getting EventDetail with uniques key Title");
        return eventDetailService.getByTitle(title);
    }

    @GetMapping(value = "/meetingLink/{meetingLink}" )
    @ApiOperation(value = "Returns the matching EventDetail with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EventDetail getByMeetingLink(@PathVariable("meetingLink") String meetingLink) {
        LOGGER.debug("Getting EventDetail with uniques key MeetingLink");
        return eventDetailService.getByMeetingLink(meetingLink);
    }

    /**
     * @deprecated Use {@link #findEventDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EventDetail instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EventDetail> searchEventDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EventDetails list by query filter:{}", (Object) queryFilters);
        return eventDetailService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EventDetail instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EventDetail> findEventDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EventDetails list by filter:", query);
        return eventDetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EventDetail instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EventDetail> filterEventDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EventDetails list by filter", query);
        return eventDetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEventDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return eventDetailService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEventDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = EventDetail.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> eventDetailService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of EventDetail instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEventDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EventDetails");
		return eventDetailService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEventDetailAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return eventDetailService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/attendees")
    @ApiOperation(value = "Gets the attendees instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Attendee> findAssociatedAttendees(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated attendees");
        return eventDetailService.findAssociatedAttendees(id, pageable);
    }

    @GetMapping(value="/{id:.+}/eventSpeakers")
    @ApiOperation(value = "Gets the eventSpeakers instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EventSpeaker> findAssociatedEventSpeakers(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated eventSpeakers");
        return eventDetailService.findAssociatedEventSpeakers(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EventDetailService instance
	 */
	protected void setEventDetailService(EventDetailService service) {
		this.eventDetailService = service;
	}

}