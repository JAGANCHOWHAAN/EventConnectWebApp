/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.eventconnect.connectevent;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * EventSpeaker generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`EventSpeaker`")
public class EventSpeaker implements Serializable {

    private Integer id;
    private Integer eventId;
    private Integer speakerId;
    private EventDetail eventDetail;
    private Speaker speaker;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`Id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`Event_Id`", nullable = true, scale = 0, precision = 10)
    public Integer getEventId() {
        return this.eventId;
    }

    public void setEventId(Integer eventId) {
        this.eventId = eventId;
    }

    @Column(name = "`Speaker_Id`", nullable = true, scale = 0, precision = 10)
    public Integer getSpeakerId() {
        return this.speakerId;
    }

    public void setSpeakerId(Integer speakerId) {
        this.speakerId = speakerId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`Event_Id`", referencedColumnName = "`Id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`EventSpeaker_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public EventDetail getEventDetail() {
        return this.eventDetail;
    }

    public void setEventDetail(EventDetail eventDetail) {
        if(eventDetail != null) {
            this.eventId = eventDetail.getId();
        }

        this.eventDetail = eventDetail;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`Speaker_Id`", referencedColumnName = "`Id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`EventSpeaker_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Speaker getSpeaker() {
        return this.speaker;
    }

    public void setSpeaker(Speaker speaker) {
        if(speaker != null) {
            this.speakerId = speaker.getId();
        }

        this.speaker = speaker;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof EventSpeaker)) return false;
        final EventSpeaker eventSpeaker = (EventSpeaker) o;
        return Objects.equals(getId(), eventSpeaker.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}